import openai
import pygame
import random
import time
import os
import numpy as np
from pydub import AudioSegment, effects
from scipy.signal import lfilter, butter
from scipy.io.wavfile import read, write
import json
from pydub import AudioSegment
from pydub.effects import low_pass_filter, high_pass_filter
import tempfile
import pyttsx3
import re

def check():
    """Kontrola OpenAI API kl√≠ƒçe pouze p≈ôi pou≈æit√≠ OpenAI gener√°toru."""
    if config.get("announcement_generator", "free") == "openai" and not openai.api_key:
        print("‚ö†Ô∏è Warning: OpenAI API key is not set! Switching to offline generator.")
        config["announcement_generator"] = "free"


SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))  # Slo≈æka, kde je tento skript
SAFETY_VIDEO_DIR = os.path.join(SCRIPT_DIR, "safety_videos")  # Cesta ke slo≈æce s videi


# üåç Pouze tyto f√°ze se p≈ôekl√°daj√≠ do v≈°ech jazyk≈Ø
MULTILINGUAL_ANNOUNCEMENTS = {"Gate", "TaxiAfterLanding", "Safety"}

CONFIG_FILE = "config.json"

# üîÑ Funkce pro naƒçten√≠ konfigurace
def load_config():
    """Naƒçte konfiguraci z config.json, pokud neexistuje, vr√°t√≠ pr√°zdn√© hodnoty."""
    if not os.path.exists(CONFIG_FILE):
        return {
            "captain_name": "",
            "first_officer": "",
            "openai_api_key": "",
            "announcement_generator": "" 
        }
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# üìÇ Naƒçten√≠ konfigurace
config = load_config()

# üîë Pou≈æit√≠ OpenAI API kl√≠ƒçe
openai.api_key = config.get("openai_api_key", "")

# üì¢ Slovn√≠k obsahuj√≠c√≠ hl√°≈°en√≠ pro jednotliv√© f√°ze letu
ANNOUNCEMENTS = {
    "Gate": "Ladies and gentlemen, this is your captain speaking. My name is {captain_name} "
                      "and together with my first officer {first_officer}, we welcome you onboard flight {flight_number} "
                      "from {origin} to {destination} aboard our {aircraft}. Our flight duration will be {flight_duration}. "
                      "Thank you for choosing {airline} for your journey today.",
    
    "Pushback": "Cabin crew, arm doors and crosscheck.",
    
    "Takeoff": "Cabin crew, seats for takeoff.",
    
    "Descent": "Cabin crew, prepare cabin for landing.",
    
    "Final": "Cabin crew, seats for landing.",
    
    "TaxiAfterLanding": "Ladies and gentlemen, welcome to {destination}. The local time is {local_time} "
                     "and the outside temperature is {temperature} ¬∞C. Thank you for choosing {airline} "
                     "for your flight, and we wish you a pleasant holiday, a safe journey home, or a smooth continuation of your travels. "
                     "On behalf of {airline}, we wish you a wonderful day.",
    
    "Deboarding": "Cabin crew, disarm doors and crosscheck."
}


# Define FFMPEG paths correctly
FFMPEG_DIR = os.path.join(SCRIPT_DIR, "ffmpeg", "bin")  # Adjusted to include 'bin'
ffmpeg_path = os.path.join(FFMPEG_DIR, "ffmpeg.exe")
ffprobe_path = os.path.join(FFMPEG_DIR, "ffprobe.exe")

# Set Pydub paths for FFMPEG
AudioSegment.converter = ffmpeg_path
AudioSegment.ffprobe = ffprobe_path

# Add FFMPEG/bin to system PATH
os.environ["PATH"] += os.pathsep + FFMPEG_DIR

# Hlasy pro kapit√°na a cabin crew
voice_captain = "onyx"
crew_voices = ["coral", "nova", "sage", "shimmer"]
voice_crew = random.choice(crew_voices)  # N√°hodn√Ω hlas cabin crew

# Mo≈æn√© styly hl√°≈°en√≠ kapit√°na
captain_styles = ["profesion√°lnƒõ", "stroze", "p≈ô√°telsky", "zku≈°enƒõ"]

# üåç Mo≈æn√© jazyky
valid_languages = [
    "afrikaans", "arabic", "armenian", "azerbaijani", "belarusian", "bosnian", "bulgarian",
    "catalan", "chinese", "croatian", "czech", "danish", "dutch", "english", "estonian",
    "finnish", "french", "galician", "german", "greek", "hebrew", "hindi", "hungarian",
    "icelandic", "indonesian", "italian", "japanese", "kannada", "kazakh", "korean",
    "latvian", "lithuanian", "macedonian", "malay", "marathi", "maori", "nepali",
    "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "serbian",
    "slovak", "slovenian", "spanish", "swahili", "swedish", "tagalog", "tamil", "thai",
    "turkish", "ukrainian", "urdu", "vietnamese", "welsh"
]

# U≈æ p≈ôehran√© hl√°≈°ky
played_announcements = set()

def translate_safety_announcement(text, lang):
    check()
    """P≈ôelo≈æ√≠ bezpeƒçnostn√≠ hl√°≈°en√≠ do zvolen√©ho jazyka."""
    prompt = f"P≈ôelo≈æ n√°sleduj√≠c√≠ bezpeƒçnostn√≠ hl√°≈°en√≠ do jazyka {lang}:\n\n{text}"

    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Jsi profesion√°ln√≠ p≈ôekladatel a p≈ôeformuluje≈° bezpeƒçnostn√≠ hl√°≈°en√≠ aerolinek."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content.strip()


# ‚úàÔ∏è Hl√°≈°en√≠ pro r≈Øzn√© f√°ze letu
def generate_announcement_text(phase, flight_info, flight_data):
    check()
    if phase == "Gate":
        return (f"Ladies and gentlemen, this is your captain speaking. My name is {flight_info['captain_name']} "
                f"and together with my first officer {flight_info['first_officer']}, we welcome you onboard flight "
                f"{flight_info['flight_number']} from {flight_info['origin']} to {flight_info['destination']} "
                f"aboard our {flight_info['aircraft']}. Our flight duration will be {flight_info['duration']}. "
                f"Thank you for choosing {flight_info['airline']} for your journey today.")

    elif phase == "Pushback":
        return "Cabin crew, arm doors and crosscheck"

    elif phase == "Takeoff":
        return "Cabin crew, seats for takeoff"

    elif phase == "Descent" and flight_data["altitude"] < 10000:
        return "Cabin crew, prepare cabin for landing"

    elif phase == "Final" and flight_data["altitude"] < 5000:
        return "Cabin crew, seats for landing"

    elif phase == "TaxiAfterLanding":
        return (f"Ladies and gentlemen, welcome to {flight_info['destination']}. "
                f"The local time is {time.strftime('%H:%M')} and the outside temperature is {flight_data['temperature']} ¬∞C. "
                f"Thank you for choosing {flight_info['airline']} for your flight, and we wish you a pleasant holiday, "
                f"a safe journey home, or a smooth continuation of your travels. "
                f"On behalf of {flight_info['airline']}, we wish you a wonderful day.")

    elif phase == "Deboarding":
        return "Cabin crew, disarm doors and crosscheck"

    return None


# üéõ PA syst√©m efekt + radio efekt
def generate_white_noise(duration_ms, volume_db=-30):
    sample_rate = 16000  
    samples = np.random.normal(0, 1, int(sample_rate * duration_ms / 1000)).astype(np.int16)
    noise = AudioSegment(samples.tobytes(), frame_rate=sample_rate, sample_width=2, channels=1)
    return noise - abs(volume_db)

def butter_params(low_freq, high_freq, fs, order=6):
    nyq = 0.5 * fs
    low = low_freq / nyq
    high = high_freq / nyq
    b, a = butter(order, [low, high], btype='band')
    return b, a

def butter_bandpass_filter(data, low_freq, high_freq, fs, order=6):
    b, a = butter_params(low_freq, high_freq, fs, order=order)
    return lfilter(b, a, data)

def apply_pa_system_effect(filename):
    sound = AudioSegment.from_mp3(filename)
    wav_filename = filename.replace(".mp3", ".wav")
    sound.export(wav_filename, format="wav")
    fs, audio_data = read(wav_filename)
    filtered_signal = butter_bandpass_filter(audio_data, 300, 3000, fs, order=6)
    filtered_wav_filename = filename.replace(".mp3", "_radio.wav")
    write(filtered_wav_filename, fs, np.array(filtered_signal, dtype=np.int16))
    sound = AudioSegment.from_wav(filtered_wav_filename)
    white_noise = generate_white_noise(len(sound), volume_db=-30)
    final_sound = sound.overlay(white_noise)
    filtered_filename = filename.replace(".mp3", "_pa.mp3")
    final_sound.export(filtered_filename, format="mp3", bitrate="24k")
    return filtered_filename

# üé¨ **Vyhled√°n√≠ bezpeƒçnostn√≠ch vide√≠**
def find_safety_videos(icao_code):
    """Najde v≈°echna bezpeƒçnostn√≠ videa pro danou aerolinku podle ICAO k√≥du."""
    if not os.path.exists(SAFETY_VIDEO_DIR):
        print(f"‚ùå Folder '{SAFETY_VIDEO_DIR}' doesnt exist!")
        return []
    
    videos = [
        os.path.join(SAFETY_VIDEO_DIR, file)
        for file in os.listdir(SAFETY_VIDEO_DIR)
        if file.startswith(icao_code)
    ]

    if not videos:
        print(f"‚ùå No video found for {icao_code}.")
    return videos


def apply_distant_safety_effect(file_path):
    """Simuluje zvuk bezpeƒçnostn√≠ho hl√°≈°en√≠ za zav≈ôen√Ωmi dve≈ômi."""
    print(f"üîß Apply sound effect (distant) {file_path}...")

    # üõ† Naƒçteme zvukov√Ω soubor
    try:
        sound = AudioSegment.from_file(file_path)
    except Exception as e:
        print(f"‚ùå Something went wrong when loading this file: {e}")
        return None

    # ‚úÖ **P≈ôevod na mono (pokud nen√≠)**
    if sound.channels > 1:
        sound = sound.set_channels(1)

    # üîΩ **Aplikujeme low-pass filtr (mƒõkƒç√≠ zvuk, omezen√≠ vysok√Ωch frekvenc√≠)**
    filtered_sound = sound.low_pass_filter(400).low_pass_filter(250)

    # üîâ **Sn√≠≈æ√≠me hlasitost, aby to znƒõlo vzd√°lenƒõ**
    filtered_sound = filtered_sound + 6  # 8 dB m√©nƒõ

    # ‚úÖ **Vytvo≈ô√≠me stereo verzi**
    stereo_sound = AudioSegment.from_mono_audiosegments(filtered_sound, filtered_sound)

    # üóÇ **Ulo≈æ√≠me doƒçasn√Ω soubor**
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_wav:
        temp_wav_path = temp_wav.name
        stereo_sound.export(temp_wav_path, format="wav")

    print(f"‚úÖ Effect applied, saved to: {temp_wav_path}")
    return temp_wav_path

# üîä **Surround efekt pro existuj√≠c√≠ videa**
def apply_surround_effect(file_path):
    sound = AudioSegment.from_wav(file_path)
    filtered_sound = sound.low_pass_filter(400).low_pass_filter(250) - 8

    surround_sound = AudioSegment.silent(duration=len(filtered_sound), frame_rate=filtered_sound.frame_rate).set_channels(8)
    front = filtered_sound - 10
    rear = filtered_sound + 5

    surround_sound = surround_sound.overlay(front.pan(-1), position=0)
    surround_sound = surround_sound.overlay(front.pan(1), position=0)
    surround_sound = surround_sound.overlay(rear.pan(-0.7), position=0)
    surround_sound = surround_sound.overlay(rear.pan(0.7), position=0)

    temp_audio_path = file_path.replace(".wav", "_surround.wav")
    surround_sound.export(temp_audio_path, format="wav")
    return temp_audio_path

# üîä **P≈ôehr√°n√≠ bezpeƒçnostn√≠ho videa se zaji≈°tƒõn√≠m kompatibility**
def play_safety_video(video_path):
    """P≈ôehr√°v√° bezpeƒçnostn√≠ video se zvukov√Ωm efektem a opravou form√°tu."""
    print(f"üé¨ Playing safety video: {video_path}")

    # Ujist√≠me se, ≈æe soubor existuje
    if not os.path.exists(video_path):
        print(f"‚ùå Error: File {video_path} does not exist!")
        return

    # üõ† Aplikujeme vzd√°len√Ω zvukov√Ω efekt
    processed_audio = apply_distant_safety_effect(video_path)

    # Pokud aplikace efektu sel≈æe, pou≈æijeme p≈Øvodn√≠ soubor
    if not processed_audio:
        print("‚ö†Ô∏è Warning: Unable to apply effect. Using previous file.")
        processed_audio = video_path

    # üéµ **Oprava form√°tu souboru**
    try:
        sound = AudioSegment.from_file(processed_audio)

        # Konvertujeme na PCM WAV (44.1 kHz, 16-bit mono)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_wav:
            temp_wav_path = temp_wav.name
            sound.set_frame_rate(44100).set_channels(1).set_sample_width(2).export(temp_wav_path, format="wav")
        
        processed_audio = temp_wav_path
        print(f"üîÑ Sound converted to the right format: {processed_audio}")

    except Exception as e:
        print(f"‚ùå Error when converting the file: {e}")
        return

    # üîä **P≈ôehr√°n√≠ upraven√©ho audio souboru**
    pygame.mixer.init()
    pygame.mixer.music.load(processed_audio)
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

    # Po p≈ôehr√°n√≠ odstran√≠me doƒçasn√Ω soubor
    if os.path.exists(processed_audio):
        os.remove(processed_audio)

# üì¢ **Generov√°n√≠ bezpeƒçnostn√≠ho hl√°≈°en√≠**
def generate_safety_announcement_text(aircraft_type):
    """Vr√°t√≠ text bezpeƒçnostn√≠ho hl√°≈°en√≠ pro dan√© letadlo."""
    return (
        f"Ladies and gentlemen, on behalf of the crew I ask that you please direct your attention "
        f"to the monitors as we review the emergency procedures. There are emergency exits on this "
        f"aircraft type {aircraft_type}. Take a minute to locate the exit closest to you. Note that the nearest exit may be behind you. Count the number of rows to this exit. Should the cabin experience sudden pressure loss, stay calm and listen for instructions from the cabin crew. Oxygen masks will drop down from above your seat. Place the mask over your mouth and nose, like this. Pull the strap to tighten it. If you are traveling with children, make sure that your own mask is on first before helping your children. In the unlikely event of an emergency landing and evacuation, leave your carry-on items behind. Life rafts are located below your seats and emergency lighting will lead you to your closest exit and slide. We ask that you make sure that all carry-on luggage is stowed away safely during the flight. While we wait for take off, please take a moment to review the safety data card in the seat pocket in front of you."
    )

# üîä **P≈ôehr√°n√≠ bezpeƒçnostn√≠ho hl√°≈°en√≠ nebo videa**
def play_safety_announcement(aircraft_type, selected_video=None, primary_lang="english", secondary_langs=[]):
    """Spust√≠ bezpeƒçnostn√≠ video nebo vygeneruje bezpeƒçnostn√≠ hl√°≈°en√≠ ve v≈°ech vybran√Ωch jazyc√≠ch."""
    
    generator = config.get("announcement_generator", "openai")  # Defaultnƒõ OpenAI

    if selected_video and os.path.exists(selected_video):
        print(f"üé¨ Playing safety video: {selected_video}")
        play_safety_video(selected_video)
        return

    print(f"üéôÔ∏è Generating safety video for {aircraft_type}...")

    base_text = generate_safety_announcement_text(aircraft_type)

    if generator == "openai":
        check()
        # üåç P≈ôekl√°d√°me pouze pokud je zapnut√Ω OpenAI generator
        langs_to_generate = [primary_lang] + secondary_langs
        audio_files = []

        for lang in langs_to_generate:
            translated_text = translate_and_rephrase_announcement(base_text, lang, "profesion√°lnƒõ")
            filename = f"safety_announcement_{lang}.mp3"
            filtered_filename = generate_announcement(lang, translated_text, voice_crew, filename)
            audio_files.append(filtered_filename)

        # üîä P≈ôehr√°n√≠ OpenAI hl√°≈°en√≠
        pygame.mixer.init()
        for idx, file in enumerate(audio_files):
            pygame.mixer.music.load(file)
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)

            if idx < len(audio_files) - 1:
                time.sleep(2)  # ‚è≥ Pauza mezi jazyky

    elif generator == "free":
        # ‚úÖ Free varianta (pyttsx3) pro offline re≈æim
        print("üé§ Initializing pyttsx3 (offline TTS for safety announcement)...")
        engine = pyttsx3.init()
        voices = engine.getProperty('voices')

        # üîÑ V√Ωbƒõr hlas≈Ø (fallback na prvn√≠ hlas pokud nen√≠ nalezen male/female)
        male_voice = next((voice for voice in voices if "male" in voice.name.lower()), voices[0])
        female_voice = next((voice for voice in voices if "female" in voice.name.lower()), voices[1])

        print(f"üéôÔ∏è Free offline safety announcement: {base_text}")

        engine.setProperty('rate', 125)  # Nastaven√≠ rychlosti
        engine.setProperty('volume', 1.0)  # Nastaven√≠ hlasitosti

        # üë®‚Äç‚úàÔ∏è Kapit√°n ‚Üí Mu≈æsk√Ω hlas
        engine.setProperty('voice', female_voice.id)
        engine.say(base_text)
        engine.runAndWait()

    print("‚úÖ Safety demo done.")

def clean_text(text):
    """Odebere v≈°echny emoji a ne-ASCII znaky z textu."""
    text = text.encode("ascii", "ignore").decode()  # Odstran√≠ znaky mimo ASCII
    text = re.sub(r'[^\x00-\x7F]+', '', text)  # Dal≈°√≠ pojistka proti ne-ASCII znak≈Øm
    return text

def translate_and_rephrase_announcement(text, lang, style):
    """ P≈ôelo≈æ√≠ a p≈ôeformuluje hl√°≈°en√≠ do po≈æadovan√©ho jazyka a stylu. """
    text = clean_text(text)  # ‚úÖ Odstranƒõn√≠ emoji a ne-ASCII znak≈Ø

    prompt = f"P≈ôelo≈æ a p≈ôeformuluj n√°sleduj√≠c√≠ hl√°≈°en√≠ do jazyka {lang} ve stylu {style}:\n\n{text}"
    
    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Jsi leteck√Ω kapit√°n a p≈ôeformulov√°v√°≈° hl√°≈°en√≠ pro pasa≈æ√©ry."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content.strip()

# üì¢ P≈ôehr√°n√≠ hl√°≈°en√≠
def play_announcement(phase, flight_info, flight_data, primary_lang, secondary_langs, style):
    """P≈ôehr√°v√° hl√°≈°en√≠ podle vybran√©ho gener√°toru (OpenAI nebo Free)."""
    if phase in played_announcements:
        return

    generator = config.get("announcement_generator", "openai")  # Defaultnƒõ OpenAI

    print(f"üõ´ Announcment for phase of flight: {phase}")

    # üìù Naƒçten√≠ textu hl√°≈°en√≠
    text = ANNOUNCEMENTS.get(phase)
    if not text:
        return

    # üîÑ Dopln√≠me promƒõnn√© do hl√°≈°en√≠
    text = text.format(
        captain_name=flight_info["captain_name"],
        first_officer=flight_info["first_officer"],
        flight_number=flight_info["flight_number"],
        origin=flight_info.get("origin", flight_info.get("origin_iata", "N/A")),
        destination=flight_info["destination"],
        aircraft=flight_info["aircraft"],
        airline=flight_info["airline"],
        flight_duration=flight_info["duration"],
        local_time=time.strftime('%H:%M'),
        temperature=flight_data.get("temperature", "N/A")
    )

    if generator == "openai":
        check()
        # üåç P≈ôekl√°d√°me jen f√°ze, kter√© to vy≈æaduj√≠
        langs_to_generate = [primary_lang] + secondary_langs if phase in MULTILINGUAL_ANNOUNCEMENTS else [primary_lang]

        # üéô OpenAI TTS
        audio_files = []
        for lang in langs_to_generate:
            translated_text = translate_and_rephrase_announcement(text, lang, style)
            filename = f"announcement_{phase}_{lang}.mp3"
            filtered_filename = generate_announcement(lang, translated_text, voice_captain, filename)
            audio_files.append(filtered_filename)

        # üîä P≈ôehr√°n√≠ OpenAI hl√°≈°en√≠
        pygame.mixer.init()
        for idx, file in enumerate(audio_files):
            pygame.mixer.music.load(file)
            pygame.mixer.music.play()
            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)
            if idx < len(audio_files) - 1:
                time.sleep(2)  # ‚è≥ Pauza mezi jazyky

    elif generator == "free":
        # ‚úÖ Inicializace pyttsx3 jen pokud je pot≈ôeba (OFFLINE varianta)
        print("üé§ Initializing pyttsx3 (offline TTS)...")
        engine = pyttsx3.init()
        voices = engine.getProperty('voices')

        # üîÑ V√Ωbƒõr hlas≈Ø (fallback na prvn√≠ hlas pokud nen√≠ nalezen male/female)
        male_voice = next((voice for voice in voices if "male" in voice.name.lower()), voices[0])
        female_voice = next((voice for voice in voices if "female" in voice.name.lower()), voices[1])

        print(f"üéôÔ∏è Free offline announcement: {text}")

        engine.setProperty('rate', 125)  # Nastaven√≠ rychlosti
        engine.setProperty('volume', 1.0)  # Nastaven√≠ hlasitosti

        # üë®‚Äç‚úàÔ∏è Kapit√°n ‚Üí Mu≈æsk√Ω hlas
        engine.setProperty('voice', male_voice.id)
        engine.say(text)
        engine.runAndWait()

    played_announcements.add(phase)


# üîß Funkce pro generov√°n√≠ audia
def generate_announcement(lang, text, voice, filename):
    """ Vygeneruje hl√°≈°en√≠ pomoc√≠ OpenAI TTS a aplikuje PA efekt """
    print(f"üéôÔ∏è Generating announcement: ({lang.upper()} - {voice})")

    # Odesl√°n√≠ po≈æadavku na OpenAI API
    response = openai.audio.speech.create(
        model="tts-1",
        voice=voice,
        input=text
    )

    # Ulo≈æen√≠ MP3 souboru
    with open(filename, "wb") as f:
        f.write(response.content)

    print(f"‚úÖ Announcement saved as: {filename}")

    return apply_pa_system_effect(filename)



